using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Ant : MonoBehaviour
{
 private Rigidbody2D rb;
    public bool returningHomeNow;
    public bool seekingFoodNow = true;
    public GameObject raycaster;
    public GameObject home;
    public GameObject food;
    public Vector2 velocity;
    public Vector3 goPosition;
    public Vector3 moveDirection;
    public Vector3 oldPosition;
    public Vector3 moveHere;
  private  float curDistance;
    public float angleDeg = 90f;
    public float angle;
    public float _randomNumber;
    public float hungerCountDown = 300;
    public float hungerMax = 300;
    private float timeToChangeDirection;
    float distance;
    float x;
    float y;
    float z;

    // Start is called before the first frame update
    void Start()
    {
        rb = GetComponent<Rigidbody2D>();
        _randomNumber = Random.Range(0.99f, 1.01f);
        hungerMax = hungerMax * _randomNumber*5;
        hungerCountDown = hungerMax;

    }

    // Update is called once per frame
    void FixedUpdate()
    {
        GameObject[] gos;
        gos = GameObject.FindGameObjectsWithTag("Food");
        if (gos.Length==0) { food.transform.position = home.transform.position; }
        

        if (rb.velocity.sqrMagnitude < 0.01f)
        {
            x = x * _randomNumber;
            y = y * _randomNumber;
            z = 0;
            moveHere = new Vector3(x, y, z);
            moveDirection = moveHere - transform.position;
            moveDirection = moveDirection.normalized;
            angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
            Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
            transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
            rb.velocity = moveDirection;
        }
        hungerCountDown = hungerCountDown - 1;
        timeToChangeDirection -= Time.deltaTime;
        if (hungerCountDown < 0)
        {   //   followingTrailNow = false;
            seekingFoodNow = true;
            returningHomeNow = false;
            transform.position = home.transform.position;
            hungerCountDown = hungerMax;
        }
        if (timeToChangeDirection <= 0)
        {
            x = Random.Range(-15, 15);
            y = Random.Range(-15, 15);
            z = 0;
            timeToChangeDirection = 0.1f + _randomNumber;
        }


        float dist = Vector3.Distance(home.transform.position, transform.position);
        dist = Mathf.Abs(dist);
        print("Distance to home : " + dist);
        if (dist < 0.01f)
        {
            transform.rotation = Quaternion.LookRotation(-transform.forward, Vector3.up);
            seekingFoodNow = true;
            returningHomeNow = false;
             transform.position = Vector2.MoveTowards(transform.position, food.transform.position, .9f);
       //   rb.AddForce(transform.up * 100000 * 10);

        }

        if (seekingFoodNow)
        {

            RaycastHit2D hit = Physics2D.Raycast(raycaster.transform.position, raycaster.transform.up, 0.1f);

            Debug.DrawRay(raycaster.transform.position, raycaster.transform.up, Color.green, 0.1f);
            if (hit)
            {
                Vector2 forward = raycaster.transform.TransformDirection(Vector2.up);
                if (hit.collider.gameObject.tag == "Food")
                {
                    hungerCountDown = hungerMax;
                 //   followingTrailNow = true;
                    seekingFoodNow = false;
                    returningHomeNow = true;
                    moveDirection = hit.transform.position - transform.position;
                    moveDirection = moveDirection.normalized;
                    angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                    Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                    rb.velocity = moveDirection;
                   

                    dist = Vector3.Distance(hit.transform.position, transform.position);
                    dist = Mathf.Abs(dist);
                    print("Distance to hitFood : " + dist);
                    if (dist < 0.7f)
                    {

                        Destroy(hit.transform.gameObject); // destroy the object hit
                        Debug.Log("hit is " + hit.collider.name);
                        moveDirection = home.transform.position - transform.position;
                        moveDirection = moveDirection.normalized;
                        angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                        angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                        transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                        rb.velocity = moveDirection;
                    }

                }
                if (hit.collider.gameObject.tag == "TrailToFood")
                {
                    moveDirection = hit.transform.position - transform.position;
                    moveDirection = moveDirection.normalized;
                    angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                    Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                    rb.velocity = moveDirection;

                    dist = Vector3.Distance(hit.transform.position, transform.position);
                    Debug.Log("Distance to hitTrail : " + dist);

                    if (gos.Length >20)
                    {
                        moveDirection = food.transform.position - transform.position;
                        moveDirection = moveDirection.normalized;
                        angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                        angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                        transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                        rb.velocity = moveDirection;
                    }



                }

                if (hit.collider.gameObject.tag == "Home")
                {
                    x = x * _randomNumber;
                    y = y * _randomNumber;
                    z = 0;
                    moveHere = new Vector3(x, y, z);
                    moveDirection = moveHere - transform.position;
                    moveDirection = moveDirection.normalized;
                    angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                    Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                    rb.velocity = moveDirection;
                }
            }
            else
            {
                x = x * _randomNumber;
                y = y * _randomNumber;
                z = 0;
                moveHere = new Vector3(x, y, z);
                moveDirection = moveHere - transform.position;
                moveDirection = moveDirection.normalized;
                angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                rb.velocity = moveDirection;

            }
        }
        if (returningHomeNow)
        {
            RaycastHit2D hit = Physics2D.Raycast(raycaster.transform.position, raycaster.transform.up, 0.01f);

            Debug.DrawRay(raycaster.transform.position, raycaster.transform.up, Color.red, 0.01f);
            if (hit)
            {
                Vector2 forward = raycaster.transform.TransformDirection(Vector2.up);
                if (hit.collider.gameObject.tag == "Home")
                {
                 //   followingTrailNow = true;
                    seekingFoodNow = true;
                    returningHomeNow = false;

                    moveDirection = home.transform.position - transform.position;
                    moveDirection = moveDirection.normalized;
                    angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                    Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                    rb.velocity = moveDirection;
                  //  rb.AddForce(transform.up * 100000 * 10);

                }
                if (hit.collider.gameObject.tag == "TrailToFood")
                {
                    moveDirection = hit.transform.position - transform.position;
                    moveDirection = moveDirection.normalized;
                    angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                    Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                    rb.velocity = moveDirection;

                    dist = Vector3.Distance(hit.transform.position, transform.position);
                    dist = Mathf.Abs(dist);
                   Debug.Log("Distance to hitTrail : " + dist);

                    if (gos.Length > 20)
                    {
                        moveDirection = home.transform.position - transform.position;
                        moveDirection = moveDirection.normalized;
                        angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                        angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                        transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                        rb.velocity = moveDirection;
                    }

                }
                if (hit.collider.gameObject.tag == "Food")
                {
                    x = x * _randomNumber;
                    y = y * _randomNumber;
                    z = 0;
                    moveHere = new Vector3(x, y, z);
                    moveDirection = moveHere - transform.position;
                    moveDirection = moveDirection.normalized;
                    angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                    Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                    rb.velocity = moveDirection;
                }
            }
            else
            {
                x = x * _randomNumber;
                y = y * _randomNumber;
                z = 0;
                moveHere = new Vector3(x, y, z);
                moveDirection = moveHere - transform.position;
                moveDirection = moveDirection.normalized;
                angle = Mathf.Atan2(moveDirection.y, moveDirection.x) * Mathf.Rad2Deg - 90f;
                Quaternion angleAxis = Quaternion.AngleAxis(angle, Vector3.forward);
                transform.rotation = Quaternion.Slerp(transform.rotation, angleAxis, Time.deltaTime * 1000);
                rb.velocity = moveDirection;

            }
        }
    }
}
