using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class Ant : MonoBehaviour
{
    public float hunger = 300000;
    float distance;
    public Vector3 goPosition;
    public bool returningHomeNow;
    public bool seekingFoodNow = true;
    public bool followingTrailNow;
    public GameObject raycaster;
    public GameObject home;
    public Vector2 velocity;

    // Start is called before the first frame update
    void Start()
    {


    }

    // Update is called once per frame
    void FixedUpdate()
    {
        hunger = hunger - 1;
        if (seekingFoodNow)
        {
            if (hunger < 0)
            {
                transform.position = home.transform.position;
                hunger = 0;
            }
            RaycastHit2D hit = Physics2D.Raycast(raycaster.transform.position, raycaster.transform.up, 3);

            Debug.DrawRay(raycaster.transform.position, raycaster.transform.up, Color.blue, 3.0f);
            if (hit)
            {
                Vector2 forward = raycaster.transform.TransformDirection(Vector2.up);
                if (hit.collider.gameObject.tag == "Food")
                {
                    seekingFoodNow = false;
                    returningHomeNow = true;
                    GameObject selectedEnemy = hit.transform.gameObject;

                    Destroy(hit.transform.gameObject); // destroy the object hit
                    Debug.Log("hit is " + hit.collider.name);

                    transform.position = Vector2.MoveTowards(transform.position, hit.transform.position, .01f);
                    Vector3 vectorToTarget = hit.transform.position - transform.position;
                    float angle = Mathf.Atan2(vectorToTarget.y, vectorToTarget.x) * Mathf.Rad2Deg;
                    Quaternion q = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, q, Time.deltaTime * 10);
                }
                RandomWalk other = (RandomWalk)gameObject.GetComponent(typeof(RandomWalk));
                other.AntsRandomWalk();
            }
            else
            {
                RandomWalk other = (RandomWalk)gameObject.GetComponent(typeof(RandomWalk));
                other.AntsRandomWalk();
            }
        }


        if (returningHomeNow)
        {
            RaycastHit2D hit1 = Physics2D.Raycast(raycaster.transform.position, raycaster.transform.up, 10);

            Debug.DrawRay(raycaster.transform.position, raycaster.transform.up, Color.red, 10.0f);
            if (hit1)
            {

                Vector2 forward1 = raycaster.transform.TransformDirection(Vector2.up);
                if (hit1.collider.gameObject.tag == "Home")
                {
                    Debug.Log("hit is " + hit1.collider.name);
                    seekingFoodNow = true;
                    returningHomeNow = false;
                }
                else
                {
                    RandomWalk other1 = (RandomWalk)gameObject.GetComponent(typeof(RandomWalk));
                    other1.AntsRandomWalk();
                }
            }
            else
            {
                RandomWalk other1 = (RandomWalk)gameObject.GetComponent(typeof(RandomWalk));
                other1.AntsRandomWalk();
            }







            if (hit1)
            {
                if (hit1.collider.gameObject.tag == "Home")
                {
                    seekingFoodNow = true;
                    returningHomeNow = false;
                    transform.position = Vector2.MoveTowards(transform.position, hit1.transform.position, .01f);
                    Vector3 vectorToTarget = hit1.transform.position - transform.position;
                    float angle = Mathf.Atan2(vectorToTarget.y, vectorToTarget.x) * Mathf.Rad2Deg;
                    Quaternion q = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, q, Time.deltaTime * 10);
                }
                if (hit1.collider.gameObject.tag == "TrailToFood")
                {
                    Debug.Log("hit is " + hit1.collider.name);

                    transform.position = Vector2.MoveTowards(transform.position, hit1.transform.position, .01f);
                    Vector3 vectorToTarget = hit1.transform.position - transform.position;
                    float angle = Mathf.Atan2(vectorToTarget.y, vectorToTarget.x) * Mathf.Rad2Deg;
                    Quaternion q = Quaternion.AngleAxis(angle, Vector3.forward);
                    transform.rotation = Quaternion.Slerp(transform.rotation, q, Time.deltaTime * 10);
                }
                RandomWalk other = (RandomWalk)gameObject.GetComponent(typeof(RandomWalk));
                other.AntsRandomWalk();
            }
            else
            {
                RandomWalk other = (RandomWalk)gameObject.GetComponent(typeof(RandomWalk));
                other.AntsRandomWalk();
            }
        }
    }
   
}

